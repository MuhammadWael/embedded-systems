
Kernal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000384  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000003f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1d  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000890  00000000  00000000  000012a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073a  00000000  00000000  00001b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051e  00000000  00000000  000024f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b4  00000000  00000000  00002a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_10>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 02 01 	call	0x204	; 0x204 <main>
  74:	0c 94 c0 01 	jmp	0x380	; 0x380 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_void_Set_pin_dir>:
#include "DIO_Interface.h"

void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin,u8 copy_u8_dir)
{
	 //set the pin's direction by taking the port and pin and direction in or out
	if (copy_u8_pin <= 7 &&copy_u8_pin >=0)
  7c:	68 30       	cpi	r22, 0x08	; 8
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_void_Set_pin_dir+0x6>
  80:	6d c0       	rjmp	.+218    	; 0x15c <DIO_void_Set_pin_dir+0xe0>
	{
		if(copy_u8_dir == OUTPUT)
  82:	41 30       	cpi	r20, 0x01	; 1
  84:	a1 f5       	brne	.+104    	; 0xee <DIO_void_Set_pin_dir+0x72>
		{
			switch(copy_u8_port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_void_Set_pin_dir+0x30>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_void_Set_pin_dir+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_void_Set_pin_dir+0x46>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_void_Set_pin_dir+0x5c>
  94:	08 95       	ret
			{
				case PORTA:SET_BIT(DDRA_REG,copy_u8_pin); break;
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_void_Set_pin_dir+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_void_Set_pin_dir+0x22>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
				case PORTB:SET_BIT(DDRB_REG,copy_u8_pin);break;
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_void_Set_pin_dir+0x3c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_void_Set_pin_dir+0x38>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
				case PORTC:SET_BIT(DDRC_REG,copy_u8_pin);break;			
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_void_Set_pin_dir+0x52>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_void_Set_pin_dir+0x4e>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
				case PORTD:SET_BIT(DDRD_REG,copy_u8_pin);break;
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_void_Set_pin_dir+0x68>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_void_Set_pin_dir+0x64>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
			}
		}
	
		else
		{
			switch(copy_u8_port)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 f0       	breq	.+36     	; 0x116 <DIO_void_Set_pin_dir+0x9a>
  f2:	28 f0       	brcs	.+10     	; 0xfe <DIO_void_Set_pin_dir+0x82>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	d9 f0       	breq	.+54     	; 0x12e <DIO_void_Set_pin_dir+0xb2>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	29 f1       	breq	.+74     	; 0x146 <DIO_void_Set_pin_dir+0xca>
  fc:	08 95       	ret
			{
				case PORTA:CLR_BIT(DDRA_REG,copy_u8_pin); break;
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_void_Set_pin_dir+0x8e>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_void_Set_pin_dir+0x8a>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
				case PORTB:CLR_BIT(DDRB_REG,copy_u8_pin);break;
 116:	27 b3       	in	r18, 0x17	; 23
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_void_Set_pin_dir+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_void_Set_pin_dir+0xa2>
 126:	80 95       	com	r24
 128:	82 23       	and	r24, r18
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
				case PORTC:CLR_BIT(DDRC_REG,copy_u8_pin);break;
 12e:	24 b3       	in	r18, 0x14	; 20
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_void_Set_pin_dir+0xbe>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	6a 95       	dec	r22
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_void_Set_pin_dir+0xba>
 13e:	80 95       	com	r24
 140:	82 23       	and	r24, r18
 142:	84 bb       	out	0x14, r24	; 20
 144:	08 95       	ret
				case PORTD:CLR_BIT(DDRD_REG,copy_u8_pin);break;
 146:	21 b3       	in	r18, 0x11	; 17
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_void_Set_pin_dir+0xd6>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_void_Set_pin_dir+0xd2>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <RTOS_void_Schdular>:
#include "Kernal_Interface.h"

Task_T TaskArr[TASK_NUM] = {{0}};
	
static void RTOS_void_Schdular(void) //static to be accessed inside the file only
{
 15e:	cf 93       	push	r28
	static u16 counter = 0;
	u8 task_itr = 0;
	counter++;
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 164:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	for (task_itr = 0; task_itr < TASK_NUM; task_itr++)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	1f c0       	rjmp	.+62     	; 0x1b4 <RTOS_void_Schdular+0x56>
	{
		if (counter % TaskArr[task_itr].periodicity == 0)
 176:	2c 2f       	mov	r18, r28
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ee 59       	subi	r30, 0x9E	; 158
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	62 81       	ldd	r22, Z+2	; 0x02
 18a:	73 81       	ldd	r23, Z+3	; 0x03
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 190:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 194:	0e 94 98 01 	call	0x330	; 0x330 <__divmodhi4>
 198:	89 2b       	or	r24, r25
 19a:	59 f4       	brne	.+22     	; 0x1b2 <RTOS_void_Schdular+0x54>
		{
			
			TaskArr[task_itr].ptr_task();
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	f9 01       	movw	r30, r18
 1a6:	ee 59       	subi	r30, 0x9E	; 158
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	01 90       	ld	r0, Z+
 1ac:	f0 81       	ld	r31, Z
 1ae:	e0 2d       	mov	r30, r0
 1b0:	09 95       	icall
static void RTOS_void_Schdular(void) //static to be accessed inside the file only
{
	static u16 counter = 0;
	u8 task_itr = 0;
	counter++;
	for (task_itr = 0; task_itr < TASK_NUM; task_itr++)
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
 1b4:	c3 30       	cpi	r28, 0x03	; 3
 1b6:	f8 f2       	brcs	.-66     	; 0x176 <RTOS_void_Schdular+0x18>
		{
			
			TaskArr[task_itr].ptr_task();
		}
	}
}
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <RTOS_void_Start>:
void RTOS_void_Start(void)
{
	TIMER0_CTC_Init();
 1bc:	0e 94 85 01 	call	0x30a	; 0x30a <TIMER0_CTC_Init>
	set_callback(CTC_MODE,RTOS_void_Schdular); //we used callback function in order to use the static 
 1c0:	6f ea       	ldi	r22, 0xAF	; 175
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 29 01 	call	0x252	; 0x252 <set_callback>
 1ca:	08 95       	ret

000001cc <RTOS_void_CreateTask>:
}
void RTOS_void_CreateTask(u8 priority, u16 periodicity, void (*ptr)(void))
{
	TaskArr[priority].periodicity = periodicity;
 1cc:	e8 2f       	mov	r30, r24
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	ee 59       	subi	r30, 0x9E	; 158
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	73 83       	std	Z+3, r23	; 0x03
 1de:	62 83       	std	Z+2, r22	; 0x02
	TaskArr[priority].ptr_task = ptr;
 1e0:	51 83       	std	Z+1, r21	; 0x01
 1e2:	40 83       	st	Z, r20
 1e4:	08 95       	ret

000001e6 <led1>:
#include "TIMER_Interface.h"
#include "Kernal_Interface.h"

void led1()
{
	TOGGLE_BIT(PORTA_REG,0);
 1e6:	9b b3       	in	r25, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	89 27       	eor	r24, r25
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	08 95       	ret

000001f0 <led2>:
}
void led2()
{
	TOGGLE_BIT(PORTA_REG,1);
 1f0:	9b b3       	in	r25, 0x1b	; 27
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	89 27       	eor	r24, r25
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret

000001fa <led3>:
}
void led3()
{
	TOGGLE_BIT(PORTA_REG,2);
 1fa:	9b b3       	in	r25, 0x1b	; 27
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	89 27       	eor	r24, r25
 200:	8b bb       	out	0x1b, r24	; 27
 202:	08 95       	ret

00000204 <main>:
}
int main(void)
{
	DIO_void_Set_pin_dir(PORTA,PIN0,OUTPUT);
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(PORTA,PIN1,OUTPUT);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(PORTA,PIN2,OUTPUT);
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_void_Set_pin_dir>
	RTOS_void_CreateTask(0,100,led1);
 222:	43 ef       	ldi	r20, 0xF3	; 243
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	64 e6       	ldi	r22, 0x64	; 100
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <RTOS_void_CreateTask>
	RTOS_void_CreateTask(1,200,led2);
 230:	48 ef       	ldi	r20, 0xF8	; 248
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	68 ec       	ldi	r22, 0xC8	; 200
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <RTOS_void_CreateTask>
	RTOS_void_CreateTask(2,300,led3);
 23e:	4d ef       	ldi	r20, 0xFD	; 253
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	6c e2       	ldi	r22, 0x2C	; 44
 244:	71 e0       	ldi	r23, 0x01	; 1
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <RTOS_void_CreateTask>
	RTOS_void_Start();
 24c:	0e 94 de 00 	call	0x1bc	; 0x1bc <RTOS_void_Start>
 250:	ff cf       	rjmp	.-2      	; 0x250 <main+0x4c>

00000252 <set_callback>:
	
}

void set_callback(u8 mode,void(*ptr)(void))
{
	if (mode == OVERFLOW)
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	29 f4       	brne	.+10     	; 0x260 <set_callback+0xe>
	{
		ptr_overflow = ptr;
 256:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <ptr_overflow+0x1>
 25a:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <ptr_overflow>
 25e:	08 95       	ret
	}
	else if (mode == CTC_MODE)
 260:	81 11       	cpse	r24, r1
 262:	04 c0       	rjmp	.+8      	; 0x26c <set_callback+0x1a>
	{
		ptr_CTC_mode = ptr;
 264:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <ptr_CTC_mode+0x1>
 268:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <ptr_CTC_mode>
 26c:	08 95       	ret

0000026e <__vector_11>:
	}
}

ISR(TIMER0_OVF)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	ptr_overflow();
 290:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <ptr_overflow>
 294:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <ptr_overflow+0x1>
 298:	09 95       	icall
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_10>:
ISR(TIMER0_COMP)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	ptr_CTC_mode();
 2de:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <ptr_CTC_mode>
 2e2:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <ptr_CTC_mode+0x1>
 2e6:	09 95       	icall
}
 2e8:	ff 91       	pop	r31
 2ea:	ef 91       	pop	r30
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <TIMER0_CTC_Init>:


void TIMER0_CTC_Init(void)
{
	/*Select CTC mode*/
	SET_BIT(TCCR0_REG,3);
 30a:	83 b7       	in	r24, 0x33	; 51
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0_REG,6);
 310:	83 b7       	in	r24, 0x33	; 51
 312:	8f 7b       	andi	r24, 0xBF	; 191
 314:	83 bf       	out	0x33, r24	; 51
	
	TCCR0_REG &= 0b11111000;
 316:	83 b7       	in	r24, 0x33	; 51
 318:	88 7f       	andi	r24, 0xF8	; 248
 31a:	83 bf       	out	0x33, r24	; 51
	TCCR0_REG |= TIMER0_PRESCALER;
 31c:	83 b7       	in	r24, 0x33	; 51
 31e:	83 60       	ori	r24, 0x03	; 3
 320:	83 bf       	out	0x33, r24	; 51
	OCR0_REG = 250;
 322:	8a ef       	ldi	r24, 0xFA	; 250
 324:	8c bf       	out	0x3c, r24	; 60
	/*Enable global interrupt*/
	__asm volatile("SEI");
 326:	78 94       	sei
	/*Enable CTC mode interrupt*/
	SET_BIT(TIMSK_REG,1);
 328:	89 b7       	in	r24, 0x39	; 57
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	89 bf       	out	0x39, r24	; 57
 32e:	08 95       	ret

00000330 <__divmodhi4>:
 330:	97 fb       	bst	r25, 7
 332:	07 2e       	mov	r0, r23
 334:	16 f4       	brtc	.+4      	; 0x33a <__divmodhi4+0xa>
 336:	00 94       	com	r0
 338:	07 d0       	rcall	.+14     	; 0x348 <__divmodhi4_neg1>
 33a:	77 fd       	sbrc	r23, 7
 33c:	09 d0       	rcall	.+18     	; 0x350 <__divmodhi4_neg2>
 33e:	0e 94 ac 01 	call	0x358	; 0x358 <__udivmodhi4>
 342:	07 fc       	sbrc	r0, 7
 344:	05 d0       	rcall	.+10     	; 0x350 <__divmodhi4_neg2>
 346:	3e f4       	brtc	.+14     	; 0x356 <__divmodhi4_exit>

00000348 <__divmodhi4_neg1>:
 348:	90 95       	com	r25
 34a:	81 95       	neg	r24
 34c:	9f 4f       	sbci	r25, 0xFF	; 255
 34e:	08 95       	ret

00000350 <__divmodhi4_neg2>:
 350:	70 95       	com	r23
 352:	61 95       	neg	r22
 354:	7f 4f       	sbci	r23, 0xFF	; 255

00000356 <__divmodhi4_exit>:
 356:	08 95       	ret

00000358 <__udivmodhi4>:
 358:	aa 1b       	sub	r26, r26
 35a:	bb 1b       	sub	r27, r27
 35c:	51 e1       	ldi	r21, 0x11	; 17
 35e:	07 c0       	rjmp	.+14     	; 0x36e <__udivmodhi4_ep>

00000360 <__udivmodhi4_loop>:
 360:	aa 1f       	adc	r26, r26
 362:	bb 1f       	adc	r27, r27
 364:	a6 17       	cp	r26, r22
 366:	b7 07       	cpc	r27, r23
 368:	10 f0       	brcs	.+4      	; 0x36e <__udivmodhi4_ep>
 36a:	a6 1b       	sub	r26, r22
 36c:	b7 0b       	sbc	r27, r23

0000036e <__udivmodhi4_ep>:
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	5a 95       	dec	r21
 374:	a9 f7       	brne	.-22     	; 0x360 <__udivmodhi4_loop>
 376:	80 95       	com	r24
 378:	90 95       	com	r25
 37a:	bc 01       	movw	r22, r24
 37c:	cd 01       	movw	r24, r26
 37e:	08 95       	ret

00000380 <_exit>:
 380:	f8 94       	cli

00000382 <__stop_program>:
 382:	ff cf       	rjmp	.-2      	; 0x382 <__stop_program>
