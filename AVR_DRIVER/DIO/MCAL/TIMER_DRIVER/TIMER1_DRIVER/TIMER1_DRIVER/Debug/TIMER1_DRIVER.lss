
TIMER1_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095d  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ec  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000560  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000410  00000000  00000000  00001dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000021e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  64:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_void_Set_pin_dir>:
#include "DIO_Interface.h"

void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin,u8 copy_u8_dir)
{
	 //set the pin's direction by taking the port and pin and direction in or out
	if (copy_u8_pin <= 7 &&copy_u8_pin >=0)
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_void_Set_pin_dir+0x6>
  70:	6d c0       	rjmp	.+218    	; 0x14c <DIO_void_Set_pin_dir+0xe0>
	{
		if(copy_u8_dir == OUTPUT)
  72:	41 30       	cpi	r20, 0x01	; 1
  74:	a1 f5       	brne	.+104    	; 0xde <DIO_void_Set_pin_dir+0x72>
		{
			switch(copy_u8_port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_void_Set_pin_dir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_void_Set_pin_dir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_void_Set_pin_dir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_void_Set_pin_dir+0x5c>
  84:	08 95       	ret
			{
				case PORTA:SET_BIT(DDRA_REG,copy_u8_pin); break;
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_void_Set_pin_dir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_void_Set_pin_dir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
				case PORTB:SET_BIT(DDRB_REG,copy_u8_pin);break;
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_void_Set_pin_dir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_void_Set_pin_dir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
				case PORTC:SET_BIT(DDRC_REG,copy_u8_pin);break;			
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_void_Set_pin_dir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_void_Set_pin_dir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
				case PORTD:SET_BIT(DDRD_REG,copy_u8_pin);break;
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_void_Set_pin_dir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_void_Set_pin_dir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
			}
		}
	
		else
		{
			switch(copy_u8_port)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_void_Set_pin_dir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_void_Set_pin_dir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_void_Set_pin_dir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_void_Set_pin_dir+0xca>
  ec:	08 95       	ret
			{
				case PORTA:CLR_BIT(DDRA_REG,copy_u8_pin); break;
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_void_Set_pin_dir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_void_Set_pin_dir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
				case PORTB:CLR_BIT(DDRB_REG,copy_u8_pin);break;
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_void_Set_pin_dir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_void_Set_pin_dir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
				case PORTC:CLR_BIT(DDRC_REG,copy_u8_pin);break;
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_void_Set_pin_dir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_void_Set_pin_dir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
				case PORTD:CLR_BIT(DDRD_REG,copy_u8_pin);break;
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_void_Set_pin_dir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_void_Set_pin_dir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <main>:


int main(void)
{
	
	TIMER1_fast_PWM_init();	 
 14e:	0e 94 ce 00 	call	0x19c	; 0x19c <TIMER1_fast_PWM_init>
	DIO_void_Set_pin_dir(PORTD, PIN5, OUTPUT);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	65 e0       	ldi	r22, 0x05	; 5
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	u32 i = 0;
	
     while (1) 
    {
		for (i = 2000; i <= 4000;i++)
 15c:	0f 2e       	mov	r0, r31
 15e:	f0 ed       	ldi	r31, 0xD0	; 208
 160:	cf 2e       	mov	r12, r31
 162:	f7 e0       	ldi	r31, 0x07	; 7
 164:	df 2e       	mov	r13, r31
 166:	e1 2c       	mov	r14, r1
 168:	f1 2c       	mov	r15, r1
 16a:	f0 2d       	mov	r31, r0
 16c:	0f c0       	rjmp	.+30     	; 0x18c <main+0x3e>
		{
			TIMER1_FAST_PWM(i);
 16e:	c7 01       	movw	r24, r14
 170:	b6 01       	movw	r22, r12
 172:	0e 94 ee 00 	call	0x1dc	; 0x1dc <TIMER1_FAST_PWM>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	9e e4       	ldi	r25, 0x4E	; 78
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x2c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x32>
 180:	00 00       	nop
	DIO_void_Set_pin_dir(PORTD, PIN5, OUTPUT);
	u32 i = 0;
	
     while (1) 
    {
		for (i = 2000; i <= 4000;i++)
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	c9 1a       	sub	r12, r25
 186:	d9 0a       	sbc	r13, r25
 188:	e9 0a       	sbc	r14, r25
 18a:	f9 0a       	sbc	r15, r25
 18c:	81 ea       	ldi	r24, 0xA1	; 161
 18e:	c8 16       	cp	r12, r24
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	d8 06       	cpc	r13, r24
 194:	e1 04       	cpc	r14, r1
 196:	f1 04       	cpc	r15, r1
 198:	54 f3       	brlt	.-44     	; 0x16e <main+0x20>
 19a:	e0 cf       	rjmp	.-64     	; 0x15c <main+0xe>

0000019c <TIMER1_fast_PWM_init>:
void TIMER1_fast_PWM_init(void)
{
	
	/* for CLEAR on Compare match SET on HIGH */
	//SET PWM for channel A (OCR1A) -- clear bit 6 and set bit 7
	SET_BIT(TCCR1A_REG,7);
 19c:	8f b5       	in	r24, 0x2f	; 47
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,6);
 1a2:	8f b5       	in	r24, 0x2f	; 47
 1a4:	8f 7b       	andi	r24, 0xBF	; 191
 1a6:	8f bd       	out	0x2f, r24	; 47
	/* SET Fast PWM --> ICR*/
	CLR_BIT(TCCR1A_REG,0);
 1a8:	8f b5       	in	r24, 0x2f	; 47
 1aa:	8e 7f       	andi	r24, 0xFE	; 254
 1ac:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A_REG,1);
 1ae:	8f b5       	in	r24, 0x2f	; 47
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B_REG,3);
 1b4:	8e b5       	in	r24, 0x2e	; 46
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG,4);
 1ba:	8e b5       	in	r24, 0x2e	; 46
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	8e bd       	out	0x2e, r24	; 46
	/*SET ICR */
	ICR_REG = 40000;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	97 bd       	out	0x27, r25	; 39
 1c6:	86 bd       	out	0x26, r24	; 38
	/*SET OCR*/
	//OCR1A_REG = 2000;
	/*SET PRESCALAR*/
	CLR_BIT(TCCR1B_REG,0);
 1c8:	8e b5       	in	r24, 0x2e	; 46
 1ca:	8e 7f       	andi	r24, 0xFE	; 254
 1cc:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG,1);
 1ce:	8e b5       	in	r24, 0x2e	; 46
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B_REG,2);
 1d4:	8e b5       	in	r24, 0x2e	; 46
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	8e bd       	out	0x2e, r24	; 46
 1da:	08 95       	ret

000001dc <TIMER1_FAST_PWM>:
}

void TIMER1_FAST_PWM(u32 tick)
{	//Range FROM 2000 TO 4000
	OCR1A_REG = tick;
 1dc:	7b bd       	out	0x2b, r23	; 43
 1de:	6a bd       	out	0x2a, r22	; 42
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
