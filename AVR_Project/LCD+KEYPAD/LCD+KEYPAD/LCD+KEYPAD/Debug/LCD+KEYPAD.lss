
LCD+KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000554  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000554  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f28  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000889  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076f  00000000  00000000  00001ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bd  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000706  00000000  00000000  00002cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000033b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8a 02 	call	0x514	; 0x514 <main>
  7a:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_void_Set_pin_dir>:
		switch(copy_u8_port)
		{
			case PORTA:TOGGLE_BIT(PORTA_REG,copy_u8_pin);break;
			case PORTB:TOGGLE_BIT(PORTB_REG,copy_u8_pin);break;
			case PORTC:TOGGLE_BIT(PORTC_REG,copy_u8_pin);break;
			case PORTD:TOGGLE_BIT(PORTD_REG,copy_u8_pin);break;
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_void_Set_pin_dir+0x6>
  86:	6d c0       	rjmp	.+218    	; 0x162 <DIO_void_Set_pin_dir+0xe0>
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	a1 f5       	brne	.+104    	; 0xf4 <DIO_void_Set_pin_dir+0x72>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_void_Set_pin_dir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_void_Set_pin_dir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_void_Set_pin_dir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_void_Set_pin_dir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_void_Set_pin_dir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_void_Set_pin_dir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_void_Set_pin_dir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_void_Set_pin_dir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_void_Set_pin_dir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_void_Set_pin_dir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_void_Set_pin_dir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_void_Set_pin_dir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_void_Set_pin_dir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_void_Set_pin_dir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_void_Set_pin_dir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_void_Set_pin_dir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_void_Set_pin_dir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_void_Set_pin_dir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_void_Set_pin_dir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_void_Set_pin_dir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_void_Set_pin_dir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_void_Set_pin_dir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_void_Set_pin_dir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_void_Set_pin_dir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_void_Set_pin_val>:
 164:	68 30       	cpi	r22, 0x08	; 8
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_void_Set_pin_val+0x6>
 168:	6d c0       	rjmp	.+218    	; 0x244 <DIO_void_Set_pin_val+0xe0>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	a1 f5       	brne	.+104    	; 0x1d6 <DIO_void_Set_pin_val+0x72>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_void_Set_pin_val+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_void_Set_pin_val+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_void_Set_pin_val+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_void_Set_pin_val+0x5c>
 17c:	08 95       	ret
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_void_Set_pin_val+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_void_Set_pin_val+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_void_Set_pin_val+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_void_Set_pin_val+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_void_Set_pin_val+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_void_Set_pin_val+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	08 95       	ret
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_void_Set_pin_val+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_void_Set_pin_val+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	08 95       	ret
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_void_Set_pin_val+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_void_Set_pin_val+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_void_Set_pin_val+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_void_Set_pin_val+0xca>
 1e4:	08 95       	ret
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_void_Set_pin_val+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_void_Set_pin_val+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_void_Set_pin_val+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_void_Set_pin_val+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_void_Set_pin_val+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_void_Set_pin_val+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_void_Set_pin_val+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_void_Set_pin_val+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_u8_Get_pin_val>:
 246:	68 30       	cpi	r22, 0x08	; 8
 248:	60 f5       	brcc	.+88     	; 0x2a2 <DIO_u8_Get_pin_val+0x5c>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	79 f0       	breq	.+30     	; 0x26c <DIO_u8_Get_pin_val+0x26>
 24e:	28 f0       	brcs	.+10     	; 0x25a <DIO_u8_Get_pin_val+0x14>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	a9 f0       	breq	.+42     	; 0x27e <DIO_u8_Get_pin_val+0x38>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	e1 f0       	breq	.+56     	; 0x290 <DIO_u8_Get_pin_val+0x4a>
 258:	26 c0       	rjmp	.+76     	; 0x2a6 <DIO_u8_Get_pin_val+0x60>
 25a:	89 b3       	in	r24, 0x19	; 25
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8_Get_pin_val+0x1e>
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_u8_Get_pin_val+0x1a>
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	89 b3       	in	r24, 0x19	; 25
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_u8_Get_pin_val+0x30>
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_u8_Get_pin_val+0x2c>
 27a:	81 70       	andi	r24, 0x01	; 1
 27c:	08 95       	ret
 27e:	89 b3       	in	r24, 0x19	; 25
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8_Get_pin_val+0x42>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8_Get_pin_val+0x3e>
 28c:	81 70       	andi	r24, 0x01	; 1
 28e:	08 95       	ret
 290:	89 b3       	in	r24, 0x19	; 25
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8_Get_pin_val+0x54>
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8_Get_pin_val+0x50>
 29e:	81 70       	andi	r24, 0x01	; 1
 2a0:	08 95       	ret
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret

000002aa <set_port_dir>:
	}
}

void set_port_dir(u8 copy_u8_port,u8 copy_u8_dir)
{
	if (copy_u8_dir == OUTPUT)
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	99 f4       	brne	.+38     	; 0x2d4 <set_port_dir+0x2a>
	{
		switch(copy_u8_port)
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	49 f0       	breq	.+18     	; 0x2c4 <set_port_dir+0x1a>
 2b2:	28 f0       	brcs	.+10     	; 0x2be <set_port_dir+0x14>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	49 f0       	breq	.+18     	; 0x2ca <set_port_dir+0x20>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <set_port_dir+0x26>
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <set_port_dir+0x2a>
		{
			case PORTA: DDRA_REG = 0Xff;break;
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	9a bb       	out	0x1a, r25	; 26
 2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <set_port_dir+0x2a>
			case PORTB: DDRB_REG = 0Xff;break;
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
 2c6:	97 bb       	out	0x17, r25	; 23
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <set_port_dir+0x2a>
			case PORTC: DDRC_REG = 0Xff;break;
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	94 bb       	out	0x14, r25	; 20
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <set_port_dir+0x2a>
			case PORTD: DDRD_REG = 0Xff;break;
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	91 bb       	out	0x11, r25	; 17
		}
	}
	if (copy_u8_dir == INPUT)
 2d4:	61 11       	cpse	r22, r1
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <set_port_dir+0x4c>
	{
		switch(copy_u8_port)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <set_port_dir+0x42>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <set_port_dir+0x3e>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <set_port_dir+0x46>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <set_port_dir+0x4a>
 2e6:	08 95       	ret
		{
			case PORTA: DDRA_REG = 0X00;break;
 2e8:	1a ba       	out	0x1a, r1	; 26
 2ea:	08 95       	ret
			case PORTB: DDRB_REG = 0X00;break;
 2ec:	17 ba       	out	0x17, r1	; 23
 2ee:	08 95       	ret
			case PORTC: DDRC_REG = 0X00;break;
 2f0:	14 ba       	out	0x14, r1	; 20
 2f2:	08 95       	ret
			case PORTD: DDRD_REG = 0X00;break;
 2f4:	11 ba       	out	0x11, r1	; 17
 2f6:	08 95       	ret

000002f8 <KEYPAD_init>:
						   {'4','5','6','B'},
						   {'7','8','9','C'},
						   {'*','0','#','D'},
						  };
void KEYPAD_init(void)
{
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	//activate pull up resistors
	for (u8 itr = 0;itr < 4;itr++)
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	0f c0       	rjmp	.+30     	; 0x320 <KEYPAD_init+0x28>
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_ROWS[itr],INPUT);
 302:	c1 2f       	mov	r28, r17
 304:	d0 e0       	ldi	r29, 0x00	; 0
 306:	cc 58       	subi	r28, 0x8C	; 140
 308:	df 4f       	sbci	r29, 0xFF	; 255
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	68 81       	ld	r22, Y
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_ROWS[itr],HIGH);//to activate pull up resistors
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	68 81       	ld	r22, Y
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
						   {'*','0','#','D'},
						  };
void KEYPAD_init(void)
{
	//activate pull up resistors
	for (u8 itr = 0;itr < 4;itr++)
 31e:	1f 5f       	subi	r17, 0xFF	; 255
 320:	14 30       	cpi	r17, 0x04	; 4
 322:	78 f3       	brcs	.-34     	; 0x302 <KEYPAD_init+0xa>
 324:	10 e0       	ldi	r17, 0x00	; 0
 326:	0f c0       	rjmp	.+30     	; 0x346 <KEYPAD_init+0x4e>
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_ROWS[itr],INPUT);
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_ROWS[itr],HIGH);//to activate pull up resistors
	}
	for (u8 itr = 0;itr < 4;itr++)
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_COLS[itr],OUTPUT);
 328:	c1 2f       	mov	r28, r17
 32a:	d0 e0       	ldi	r29, 0x00	; 0
 32c:	c0 59       	subi	r28, 0x90	; 144
 32e:	df 4f       	sbci	r29, 0xFF	; 255
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	68 81       	ld	r22, Y
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[itr],HIGH);
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	68 81       	ld	r22, Y
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	for (u8 itr = 0;itr < 4;itr++)
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_ROWS[itr],INPUT);
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_ROWS[itr],HIGH);//to activate pull up resistors
	}
	for (u8 itr = 0;itr < 4;itr++)
 344:	1f 5f       	subi	r17, 0xFF	; 255
 346:	14 30       	cpi	r17, 0x04	; 4
 348:	78 f3       	brcs	.-34     	; 0x328 <KEYPAD_init+0x30>
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_COLS[itr],OUTPUT);
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[itr],HIGH);
	}
	
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	08 95       	ret

00000352 <KEYPAD_get_key>:
u8 KEYPAD_get_key(void)
{
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	u8 val=0,col_index = 0;
	for (col_index = 0;col_index < 4;col_index++)
 35e:	d0 e0       	ldi	r29, 0x00	; 0
 360:	39 c0       	rjmp	.+114    	; 0x3d4 <KEYPAD_get_key+0x82>
	{
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],LOW);
 362:	ed 2e       	mov	r14, r29
 364:	f1 2c       	mov	r15, r1
 366:	f7 01       	movw	r30, r14
 368:	e0 59       	subi	r30, 0x90	; 144
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	60 81       	ld	r22, Z
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
		for (u8 row_index = 0;row_index < 4;row_index++)
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	22 c0       	rjmp	.+68     	; 0x3be <KEYPAD_get_key+0x6c>
		{
			if (DIO_u8_Get_pin_val(KEYPAD_PORT,KEYPAD_ROWS[row_index]) == 0)
 37a:	0c 2f       	mov	r16, r28
 37c:	10 e0       	ldi	r17, 0x00	; 0
 37e:	f8 01       	movw	r30, r16
 380:	ec 58       	subi	r30, 0x8C	; 140
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	60 81       	ld	r22, Z
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8_Get_pin_val>
 38c:	81 11       	cpse	r24, r1
 38e:	16 c0       	rjmp	.+44     	; 0x3bc <KEYPAD_get_key+0x6a>
			{
				val=KEYPAD_DISPLAY[row_index][col_index];
 390:	c8 01       	movw	r24, r16
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	80 5a       	subi	r24, 0xA0	; 160
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	fc 01       	movw	r30, r24
 3a0:	ee 0d       	add	r30, r14
 3a2:	ff 1d       	adc	r31, r15
 3a4:	c0 81       	ld	r28, Z
				
				while (DIO_u8_Get_pin_val(KEYPAD_PORT,KEYPAD_ROWS[row_index]) == 0);
 3a6:	f8 01       	movw	r30, r16
 3a8:	ec 58       	subi	r30, 0x8C	; 140
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	60 81       	ld	r22, Z
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8_Get_pin_val>
 3b4:	88 23       	and	r24, r24
 3b6:	b9 f3       	breq	.-18     	; 0x3a6 <KEYPAD_get_key+0x54>
					return val ;
 3b8:	8c 2f       	mov	r24, r28
 3ba:	0f c0       	rjmp	.+30     	; 0x3da <KEYPAD_get_key+0x88>
{
	u8 val=0,col_index = 0;
	for (col_index = 0;col_index < 4;col_index++)
	{
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],LOW);
		for (u8 row_index = 0;row_index < 4;row_index++)
 3bc:	cf 5f       	subi	r28, 0xFF	; 255
 3be:	c4 30       	cpi	r28, 0x04	; 4
 3c0:	e0 f2       	brcs	.-72     	; 0x37a <KEYPAD_get_key+0x28>
				
				while (DIO_u8_Get_pin_val(KEYPAD_PORT,KEYPAD_ROWS[row_index]) == 0);
					return val ;
			}
		}
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],HIGH);
 3c2:	f7 01       	movw	r30, r14
 3c4:	e0 59       	subi	r30, 0x90	; 144
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	60 81       	ld	r22, Z
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	
}
u8 KEYPAD_get_key(void)
{
	u8 val=0,col_index = 0;
	for (col_index = 0;col_index < 4;col_index++)
 3d2:	df 5f       	subi	r29, 0xFF	; 255
 3d4:	d4 30       	cpi	r29, 0x04	; 4
 3d6:	28 f2       	brcs	.-118    	; 0x362 <KEYPAD_get_key+0x10>
					return val ;
			}
		}
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],HIGH);
	}
	return val ;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <SH_Data>:
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,HIGH);
	_delay_ms(2);
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,LOW);
}
static void SH_Data(u8 data)//send half data 
{
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <SH_Data+0xa>
 3f2:	00 d0       	rcall	.+0      	; 0x3f4 <SH_Data+0xc>
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	08 2f       	mov	r16, r24
	u8 LCD_PINS[4] = {LCD_D4,LCD_D5,LCD_D6,LCD_D7};
 3fa:	84 e0       	ldi	r24, 0x04	; 4
 3fc:	89 83       	std	Y+1, r24	; 0x01
 3fe:	85 e0       	ldi	r24, 0x05	; 5
 400:	8a 83       	std	Y+2, r24	; 0x02
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	8b 83       	std	Y+3, r24	; 0x03
 406:	87 e0       	ldi	r24, 0x07	; 7
 408:	8c 83       	std	Y+4, r24	; 0x04
	for (u8 itr = 0;itr < 4;itr++)
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	14 c0       	rjmp	.+40     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	{
		DIO_void_Set_pin_val(LCD_DPORT,LCD_PINS[itr],GET_BIT(data,itr));
 40e:	40 2f       	mov	r20, r16
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	01 2e       	mov	r0, r17
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	55 95       	asr	r21
 418:	47 95       	ror	r20
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	41 70       	andi	r20, 0x01	; 1
 420:	e1 e0       	ldi	r30, 0x01	; 1
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	ec 0f       	add	r30, r28
 426:	fd 1f       	adc	r31, r29
 428:	e1 0f       	add	r30, r17
 42a:	f1 1d       	adc	r31, r1
 42c:	60 81       	ld	r22, Z
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,LOW);
}
static void SH_Data(u8 data)//send half data 
{
	u8 LCD_PINS[4] = {LCD_D4,LCD_D5,LCD_D6,LCD_D7};
	for (u8 itr = 0;itr < 4;itr++)
 434:	1f 5f       	subi	r17, 0xFF	; 255
 436:	14 30       	cpi	r17, 0x04	; 4
 438:	50 f3       	brcs	.-44     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		DIO_void_Set_pin_val(LCD_DPORT,LCD_PINS[itr],GET_BIT(data,itr));
	}
}
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	08 95       	ret

0000044c <LCD_Send_Enable_Pulse>:
#define F_CPU 16000000ul
#include <util/delay.h>

static void LCD_Send_Enable_Pulse(void) // static to be seen by this file only
{
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,HIGH);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	63 e0       	ldi	r22, 0x03	; 3
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	8f e3       	ldi	r24, 0x3F	; 63
 458:	9f e1       	ldi	r25, 0x1F	; 31
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_Send_Enable_Pulse+0xe>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <LCD_Send_Enable_Pulse+0x14>
 460:	00 00       	nop
	_delay_ms(2);
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,LOW);
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	63 e0       	ldi	r22, 0x03	; 3
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
 46c:	08 95       	ret

0000046e <LCD_send_command>:
		//Display Clear
		LCD_send_command(0x01);		
		#endif
}
void LCD_send_command(u8 command)
{
 46e:	cf 93       	push	r28
 470:	c8 2f       	mov	r28, r24
	/* adjust controll signals to send command */
		/*set RS --> 0 to send command*/
	DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_PIN,LOW);
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	/*set RW --> 0 to wright */
	DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_PIN,LOW);	
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	62 e0       	ldi	r22, 0x02	; 2
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	#if LCD_MODE == EIGHT_BIT_MODE
	//send enable pulse
	set_port_val(LCD_DATA_PORT,command);
	LCD_Send_Enable_Pulse();
	#elif LCD_MODE == FOUR_BIT_MODE
	SH_Data(command>>4);//SEND MOST SIGNIFICANT BIT
 486:	8c 2f       	mov	r24, r28
 488:	82 95       	swap	r24
 48a:	8f 70       	andi	r24, 0x0F	; 15
 48c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT 
 490:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
	SH_Data(command);
 494:	8c 2f       	mov	r24, r28
 496:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
 49a:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
	#endif
	
}
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <LCD_init>:
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	83 ef       	ldi	r24, 0xF3	; 243
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <LCD_init+0x6>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_init+0x10>
 4b2:	00 00       	nop
		/*clear LCD*/
		LCD_send_command(0x01);
	#elif LCD_MODE == FOUR_BIT_MODE
		//send function set
		
		SH_Data(0b0010);
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
		LCD_Send_Enable_Pulse();
 4ba:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
		SH_Data(0b0010);
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
		LCD_Send_Enable_Pulse();
 4c4:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
		SH_Data(0b1100);
 4c8:	8c e0       	ldi	r24, 0x0C	; 12
 4ca:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
		LCD_Send_Enable_Pulse();
 4ce:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
		//Display ON/OFF Controll
		LCD_send_command(0b00001100);
 4d2:	8c e0       	ldi	r24, 0x0C	; 12
 4d4:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_command>
		//Display Clear
		LCD_send_command(0x01);		
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_command>
 4de:	08 95       	ret

000004e0 <LCD_send_data>:
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
	#endif
	
}
void LCD_send_data(u8 data)
{
 4e0:	cf 93       	push	r28
 4e2:	c8 2f       	mov	r28, r24
	/*set RS --> 1 to send command*/
	DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_PIN,HIGH);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	/*set RW --> 0 to write */
	DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_PIN,LOW);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	#if LCD_MODE == EIGHT_BIT_MODE
	//send enable pulse
	set_port_val(LCD_DATA_PORT,data);
	LCD_Send_Enable_Pulse();
	#elif LCD_MODE == FOUR_BIT_MODE
	SH_Data(data>>4);//SEND MOST SIGNIFICANT BIT
 4f8:	8c 2f       	mov	r24, r28
 4fa:	82 95       	swap	r24
 4fc:	8f 70       	andi	r24, 0x0F	; 15
 4fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
 502:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
	SH_Data(data);
 506:	8c 2f       	mov	r24, r28
 508:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
 50c:	0e 94 26 02 	call	0x44c	; 0x44c <LCD_Send_Enable_Pulse>
	#endif
}
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <main>:

 #define F_CPU 16000000UL
 #include <util/delay.h>
int main(void)
{
	set_port_dir(LCD_DATA_PORT,OUTPUT);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 55 01 	call	0x2aa	; 0x2aa <set_port_dir>
	DIO_void_Set_pin_dir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(LCD_E_PORT,LCD_E_PIN,OUTPUT);
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	63 e0       	ldi	r22, 0x03	; 3
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>

	LCD_init();
 53a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LCD_init>
	KEYPAD_init();
 53e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <KEYPAD_init>
	u8 val = 0;
    while (1) 
    {	
		
	
		val=KEYPAD_get_key();
 542:	0e 94 a9 01 	call	0x352	; 0x352 <KEYPAD_get_key>
		if(val != 0){
 546:	88 23       	and	r24, r24
 548:	e1 f3       	breq	.-8      	; 0x542 <main+0x2e>
					LCD_send_data(val);
 54a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_send_data>
 54e:	f9 cf       	rjmp	.-14     	; 0x542 <main+0x2e>

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
