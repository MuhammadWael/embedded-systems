
LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000062e  000006a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010b9  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cd  00000000  00000000  000018bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b0  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000234  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004eb  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c8  00000000  00000000  0000315b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003b23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <main>
  7a:	0c 94 15 03 	jmp	0x62a	; 0x62a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_void_Set_pin_dir>:
		switch(copy_u8_port)
		{
			case PORTA:TOGGLE_BIT(PORTA_REG,copy_u8_pin);break;
			case PORTB:TOGGLE_BIT(PORTB_REG,copy_u8_pin);break;
			case PORTC:TOGGLE_BIT(PORTC_REG,copy_u8_pin);break;
			case PORTD:TOGGLE_BIT(PORTD_REG,copy_u8_pin);break;
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_void_Set_pin_dir+0x6>
  86:	6d c0       	rjmp	.+218    	; 0x162 <DIO_void_Set_pin_dir+0xe0>
  88:	41 30       	cpi	r20, 0x01	; 1
  8a:	a1 f5       	brne	.+104    	; 0xf4 <DIO_void_Set_pin_dir+0x72>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	89 f0       	breq	.+34     	; 0xb2 <DIO_void_Set_pin_dir+0x30>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_void_Set_pin_dir+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	c9 f0       	breq	.+50     	; 0xc8 <DIO_void_Set_pin_dir+0x46>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	11 f1       	breq	.+68     	; 0xde <DIO_void_Set_pin_dir+0x5c>
  9a:	08 95       	ret
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_void_Set_pin_dir+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_void_Set_pin_dir+0x22>
  ac:	82 2b       	or	r24, r18
  ae:	8a bb       	out	0x1a, r24	; 26
  b0:	08 95       	ret
  b2:	27 b3       	in	r18, 0x17	; 23
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_void_Set_pin_dir+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_void_Set_pin_dir+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	08 95       	ret
  c8:	24 b3       	in	r18, 0x14	; 20
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_void_Set_pin_dir+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_void_Set_pin_dir+0x4e>
  d8:	82 2b       	or	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
  dc:	08 95       	ret
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_void_Set_pin_dir+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_void_Set_pin_dir+0x64>
  ee:	82 2b       	or	r24, r18
  f0:	81 bb       	out	0x11, r24	; 17
  f2:	08 95       	ret
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_void_Set_pin_dir+0x9a>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_void_Set_pin_dir+0x82>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_void_Set_pin_dir+0xb2>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_void_Set_pin_dir+0xca>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_void_Set_pin_dir+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_void_Set_pin_dir+0x8a>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_void_Set_pin_dir+0xa6>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_void_Set_pin_dir+0xa2>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_void_Set_pin_dir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_void_Set_pin_dir+0xba>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_void_Set_pin_dir+0xd6>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_void_Set_pin_dir+0xd2>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_void_Set_pin_val>:
 164:	68 30       	cpi	r22, 0x08	; 8
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_void_Set_pin_val+0x6>
 168:	6d c0       	rjmp	.+218    	; 0x244 <DIO_void_Set_pin_val+0xe0>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	a1 f5       	brne	.+104    	; 0x1d6 <DIO_void_Set_pin_val+0x72>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	89 f0       	breq	.+34     	; 0x194 <DIO_void_Set_pin_val+0x30>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_void_Set_pin_val+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	c9 f0       	breq	.+50     	; 0x1aa <DIO_void_Set_pin_val+0x46>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	11 f1       	breq	.+68     	; 0x1c0 <DIO_void_Set_pin_val+0x5c>
 17c:	08 95       	ret
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_void_Set_pin_val+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_void_Set_pin_val+0x22>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
 194:	28 b3       	in	r18, 0x18	; 24
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_void_Set_pin_val+0x3c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_void_Set_pin_val+0x38>
 1a4:	82 2b       	or	r24, r18
 1a6:	88 bb       	out	0x18, r24	; 24
 1a8:	08 95       	ret
 1aa:	25 b3       	in	r18, 0x15	; 21
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_void_Set_pin_val+0x52>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_void_Set_pin_val+0x4e>
 1ba:	82 2b       	or	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
 1be:	08 95       	ret
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_void_Set_pin_val+0x68>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_void_Set_pin_val+0x64>
 1d0:	82 2b       	or	r24, r18
 1d2:	82 bb       	out	0x12, r24	; 18
 1d4:	08 95       	ret
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 f0       	breq	.+36     	; 0x1fe <DIO_void_Set_pin_val+0x9a>
 1da:	28 f0       	brcs	.+10     	; 0x1e6 <DIO_void_Set_pin_val+0x82>
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	d9 f0       	breq	.+54     	; 0x216 <DIO_void_Set_pin_val+0xb2>
 1e0:	83 30       	cpi	r24, 0x03	; 3
 1e2:	29 f1       	breq	.+74     	; 0x22e <DIO_void_Set_pin_val+0xca>
 1e4:	08 95       	ret
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_void_Set_pin_val+0x8e>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_void_Set_pin_val+0x8a>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	08 95       	ret
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_void_Set_pin_val+0xa6>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_void_Set_pin_val+0xa2>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_void_Set_pin_val+0xbe>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_void_Set_pin_val+0xba>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_void_Set_pin_val+0xd6>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_void_Set_pin_val+0xd2>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DIO_u8_Get_pin_val>:
 246:	68 30       	cpi	r22, 0x08	; 8
 248:	60 f5       	brcc	.+88     	; 0x2a2 <DIO_u8_Get_pin_val+0x5c>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	79 f0       	breq	.+30     	; 0x26c <DIO_u8_Get_pin_val+0x26>
 24e:	28 f0       	brcs	.+10     	; 0x25a <DIO_u8_Get_pin_val+0x14>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	a9 f0       	breq	.+42     	; 0x27e <DIO_u8_Get_pin_val+0x38>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	e1 f0       	breq	.+56     	; 0x290 <DIO_u8_Get_pin_val+0x4a>
 258:	26 c0       	rjmp	.+76     	; 0x2a6 <DIO_u8_Get_pin_val+0x60>
 25a:	89 b3       	in	r24, 0x19	; 25
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_u8_Get_pin_val+0x1e>
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_u8_Get_pin_val+0x1a>
 268:	81 70       	andi	r24, 0x01	; 1
 26a:	08 95       	ret
 26c:	86 b3       	in	r24, 0x16	; 22
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_u8_Get_pin_val+0x30>
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_u8_Get_pin_val+0x2c>
 27a:	81 70       	andi	r24, 0x01	; 1
 27c:	08 95       	ret
 27e:	83 b3       	in	r24, 0x13	; 19
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8_Get_pin_val+0x42>
 284:	95 95       	asr	r25
 286:	87 95       	ror	r24
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8_Get_pin_val+0x3e>
 28c:	81 70       	andi	r24, 0x01	; 1
 28e:	08 95       	ret
 290:	80 b3       	in	r24, 0x10	; 16
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_u8_Get_pin_val+0x54>
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_u8_Get_pin_val+0x50>
 29e:	81 70       	andi	r24, 0x01	; 1
 2a0:	08 95       	ret
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret

000002aa <set_port_dir>:
	}
}

void set_port_dir(u8 copy_u8_port,u8 copy_u8_dir)
{
	if (copy_u8_dir == OUTPUT)
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	99 f4       	brne	.+38     	; 0x2d4 <set_port_dir+0x2a>
	{
		switch(copy_u8_port)
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	49 f0       	breq	.+18     	; 0x2c4 <set_port_dir+0x1a>
 2b2:	28 f0       	brcs	.+10     	; 0x2be <set_port_dir+0x14>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	49 f0       	breq	.+18     	; 0x2ca <set_port_dir+0x20>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <set_port_dir+0x26>
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <set_port_dir+0x2a>
		{
			case PORTA: DDRA_REG = 0Xff;break;
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	9a bb       	out	0x1a, r25	; 26
 2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <set_port_dir+0x2a>
			case PORTB: DDRB_REG = 0Xff;break;
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
 2c6:	97 bb       	out	0x17, r25	; 23
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <set_port_dir+0x2a>
			case PORTC: DDRC_REG = 0Xff;break;
 2ca:	9f ef       	ldi	r25, 0xFF	; 255
 2cc:	94 bb       	out	0x14, r25	; 20
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <set_port_dir+0x2a>
			case PORTD: DDRD_REG = 0Xff;break;
 2d0:	9f ef       	ldi	r25, 0xFF	; 255
 2d2:	91 bb       	out	0x11, r25	; 17
		}
	}
	if (copy_u8_dir == INPUT)
 2d4:	61 11       	cpse	r22, r1
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <set_port_dir+0x4c>
	{
		switch(copy_u8_port)
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	41 f0       	breq	.+16     	; 0x2ec <set_port_dir+0x42>
 2dc:	28 f0       	brcs	.+10     	; 0x2e8 <set_port_dir+0x3e>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <set_port_dir+0x46>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	39 f0       	breq	.+14     	; 0x2f4 <set_port_dir+0x4a>
 2e6:	08 95       	ret
		{
			case PORTA: DDRA_REG = 0X00;break;
 2e8:	1a ba       	out	0x1a, r1	; 26
 2ea:	08 95       	ret
			case PORTB: DDRB_REG = 0X00;break;
 2ec:	17 ba       	out	0x17, r1	; 23
 2ee:	08 95       	ret
			case PORTC: DDRC_REG = 0X00;break;
 2f0:	14 ba       	out	0x14, r1	; 20
 2f2:	08 95       	ret
			case PORTD: DDRD_REG = 0X00;break;
 2f4:	11 ba       	out	0x11, r1	; 17
 2f6:	08 95       	ret

000002f8 <KEYPAD_init>:
						   {'4','5','6','B'},
						   {'7','8','9','C'},
						   {'*','0','#','D'},
						  };
void KEYPAD_init(void)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	28 97       	sbiw	r28, 0x08	; 8
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
	u8 KEYPAD_ROWS[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
 310:	19 82       	std	Y+1, r1	; 0x01
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	8a 83       	std	Y+2, r24	; 0x02
 316:	82 e0       	ldi	r24, 0x02	; 2
 318:	8b 83       	std	Y+3, r24	; 0x03
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	8c 83       	std	Y+4, r24	; 0x04
	u8 KEYPAD_COLS[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	8d 83       	std	Y+5, r24	; 0x05
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	8e 83       	std	Y+6, r24	; 0x06
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	8f 83       	std	Y+7, r24	; 0x07
 32a:	87 e0       	ldi	r24, 0x07	; 7
 32c:	88 87       	std	Y+8, r24	; 0x08
	//activate pull up resistors
	for (u8 itr = 0;itr < 4;itr++)
 32e:	10 e0       	ldi	r17, 0x00	; 0
 330:	12 c0       	rjmp	.+36     	; 0x356 <KEYPAD_init+0x5e>
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_ROWS[itr],INPUT);
 332:	e1 e0       	ldi	r30, 0x01	; 1
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ec 0f       	add	r30, r28
 338:	fd 1f       	adc	r31, r29
 33a:	e1 0f       	add	r30, r17
 33c:	f1 1d       	adc	r31, r1
 33e:	00 81       	ld	r16, Z
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	60 2f       	mov	r22, r16
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_ROWS[itr],HIGH);//to activate pull up resistors
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	60 2f       	mov	r22, r16
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
void KEYPAD_init(void)
{
	u8 KEYPAD_ROWS[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
	u8 KEYPAD_COLS[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
	//activate pull up resistors
	for (u8 itr = 0;itr < 4;itr++)
 354:	1f 5f       	subi	r17, 0xFF	; 255
 356:	14 30       	cpi	r17, 0x04	; 4
 358:	60 f3       	brcs	.-40     	; 0x332 <KEYPAD_init+0x3a>
 35a:	10 e0       	ldi	r17, 0x00	; 0
 35c:	12 c0       	rjmp	.+36     	; 0x382 <KEYPAD_init+0x8a>
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_ROWS[itr],INPUT);
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_ROWS[itr],HIGH);//to activate pull up resistors
	}
	for (u8 itr = 0;itr < 4;itr++)
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_COLS[itr],OUTPUT);
 35e:	e5 e0       	ldi	r30, 0x05	; 5
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	ec 0f       	add	r30, r28
 364:	fd 1f       	adc	r31, r29
 366:	e1 0f       	add	r30, r17
 368:	f1 1d       	adc	r31, r1
 36a:	00 81       	ld	r16, Z
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	60 2f       	mov	r22, r16
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[itr],HIGH);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	60 2f       	mov	r22, r16
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	for (u8 itr = 0;itr < 4;itr++)
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_ROWS[itr],INPUT);
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_ROWS[itr],HIGH);//to activate pull up resistors
	}
	for (u8 itr = 0;itr < 4;itr++)
 380:	1f 5f       	subi	r17, 0xFF	; 255
 382:	14 30       	cpi	r17, 0x04	; 4
 384:	60 f3       	brcs	.-40     	; 0x35e <KEYPAD_init+0x66>
	{
		DIO_void_Set_pin_dir(KEYPAD_PORT,KEYPAD_COLS[itr],OUTPUT);
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[itr],HIGH);
	}
	
}
 386:	28 96       	adiw	r28, 0x08	; 8
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <KEYPAD_get_key>:
u8 KEYPAD_get_key(void)
{
 39c:	9f 92       	push	r9
 39e:	af 92       	push	r10
 3a0:	bf 92       	push	r11
 3a2:	cf 92       	push	r12
 3a4:	df 92       	push	r13
 3a6:	ef 92       	push	r14
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	28 97       	sbiw	r28, 0x08	; 8
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
	u8 KEYPAD_ROWS[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
 3c2:	19 82       	std	Y+1, r1	; 0x01
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	8a 83       	std	Y+2, r24	; 0x02
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	8b 83       	std	Y+3, r24	; 0x03
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	8c 83       	std	Y+4, r24	; 0x04
	u8 KEYPAD_COLS[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	8d 83       	std	Y+5, r24	; 0x05
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	8e 83       	std	Y+6, r24	; 0x06
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	8f 83       	std	Y+7, r24	; 0x07
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	88 87       	std	Y+8, r24	; 0x08
	u8 val;
	for (u8 col_index = 0;col_index < 4;col_index++)
 3e0:	b1 2c       	mov	r11, r1
 3e2:	3a c0       	rjmp	.+116    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
	{
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],LOW);
 3e4:	cb 2c       	mov	r12, r11
 3e6:	d1 2c       	mov	r13, r1
 3e8:	e5 e0       	ldi	r30, 0x05	; 5
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ec 0f       	add	r30, r28
 3ee:	fd 1f       	adc	r31, r29
 3f0:	ec 0d       	add	r30, r12
 3f2:	fd 1d       	adc	r31, r13
 3f4:	a0 80       	ld	r10, Z
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	6a 2d       	mov	r22, r10
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
		for (u8 row_index = 0;row_index < 4;row_index++)
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	22 c0       	rjmp	.+68     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		{
			if (DIO_u8_Get_pin_val(KEYPAD_PORT,KEYPAD_ROWS[row_index]) == 0)
 404:	e1 2e       	mov	r14, r17
 406:	f1 2c       	mov	r15, r1
 408:	e1 e0       	ldi	r30, 0x01	; 1
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	ec 0f       	add	r30, r28
 40e:	fd 1f       	adc	r31, r29
 410:	ee 0d       	add	r30, r14
 412:	ff 1d       	adc	r31, r15
 414:	00 81       	ld	r16, Z
 416:	60 2f       	mov	r22, r16
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8_Get_pin_val>
 41e:	81 11       	cpse	r24, r1
 420:	12 c0       	rjmp	.+36     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			{
				while (DIO_u8_Get_pin_val(KEYPAD_PORT,KEYPAD_ROWS[row_index]) == 0);
 422:	60 2f       	mov	r22, r16
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 23 01 	call	0x246	; 0x246 <DIO_u8_Get_pin_val>
 42a:	88 23       	and	r24, r24
 42c:	d1 f3       	breq	.-12     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
				val = KEYPAD_DISPLAY[row_index][col_index];
 42e:	c7 01       	movw	r24, r14
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	80 5a       	subi	r24, 0xA0	; 160
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	fc 01       	movw	r30, r24
 43e:	ec 0d       	add	r30, r12
 440:	fd 1d       	adc	r31, r13
 442:	90 80       	ld	r9, Z
				break;
 444:	03 c0       	rjmp	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	u8 KEYPAD_COLS[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
	u8 val;
	for (u8 col_index = 0;col_index < 4;col_index++)
	{
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],LOW);
		for (u8 row_index = 0;row_index < 4;row_index++)
 446:	1f 5f       	subi	r17, 0xFF	; 255
 448:	14 30       	cpi	r17, 0x04	; 4
 44a:	e0 f2       	brcs	.-72     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				while (DIO_u8_Get_pin_val(KEYPAD_PORT,KEYPAD_ROWS[row_index]) == 0);
				val = KEYPAD_DISPLAY[row_index][col_index];
				break;
			}
		}
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],HIGH);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	6a 2d       	mov	r22, r10
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
u8 KEYPAD_get_key(void)
{
	u8 KEYPAD_ROWS[4] = {KEYPAD_ROW0,KEYPAD_ROW1,KEYPAD_ROW2,KEYPAD_ROW3};
	u8 KEYPAD_COLS[4] = {KEYPAD_COL0,KEYPAD_COL1,KEYPAD_COL2,KEYPAD_COL3};
	u8 val;
	for (u8 col_index = 0;col_index < 4;col_index++)
 456:	b3 94       	inc	r11
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	8b 15       	cp	r24, r11
 45c:	18 f6       	brcc	.-122    	; 0x3e4 <KEYPAD_get_key+0x48>
			}
		}
		DIO_void_Set_pin_val(KEYPAD_PORT,KEYPAD_COLS[col_index],HIGH);
	}
	return val;
 45e:	89 2d       	mov	r24, r9
 460:	28 96       	adiw	r28, 0x08	; 8
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	ff 90       	pop	r15
 476:	ef 90       	pop	r14
 478:	df 90       	pop	r13
 47a:	cf 90       	pop	r12
 47c:	bf 90       	pop	r11
 47e:	af 90       	pop	r10
 480:	9f 90       	pop	r9
 482:	08 95       	ret

00000484 <SH_Data>:
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,HIGH);
	_delay_ms(2);
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,LOW);
}
static void SH_Data(u8 data)//send half data 
{
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	00 d0       	rcall	.+0      	; 0x48e <SH_Data+0xa>
 48e:	00 d0       	rcall	.+0      	; 0x490 <SH_Data+0xc>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	08 2f       	mov	r16, r24
	u8 LCD_PINS[4] = {LCD_D4,LCD_D5,LCD_D6,LCD_D7};
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	85 e0       	ldi	r24, 0x05	; 5
 49c:	8a 83       	std	Y+2, r24	; 0x02
 49e:	86 e0       	ldi	r24, 0x06	; 6
 4a0:	8b 83       	std	Y+3, r24	; 0x03
 4a2:	87 e0       	ldi	r24, 0x07	; 7
 4a4:	8c 83       	std	Y+4, r24	; 0x04
	for (u8 itr = 0;itr < 4;itr++)
 4a6:	10 e0       	ldi	r17, 0x00	; 0
 4a8:	14 c0       	rjmp	.+40     	; 0x4d2 <SH_Data+0x4e>
	{
		DIO_void_Set_pin_val(LCD_DPORT,LCD_PINS[itr],GET_BIT(data,itr));
 4aa:	40 2f       	mov	r20, r16
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	01 2e       	mov	r0, r17
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <SH_Data+0x32>
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <SH_Data+0x2e>
 4ba:	41 70       	andi	r20, 0x01	; 1
 4bc:	e1 e0       	ldi	r30, 0x01	; 1
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	ec 0f       	add	r30, r28
 4c2:	fd 1f       	adc	r31, r29
 4c4:	e1 0f       	add	r30, r17
 4c6:	f1 1d       	adc	r31, r1
 4c8:	60 81       	ld	r22, Z
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,LOW);
}
static void SH_Data(u8 data)//send half data 
{
	u8 LCD_PINS[4] = {LCD_D4,LCD_D5,LCD_D6,LCD_D7};
	for (u8 itr = 0;itr < 4;itr++)
 4d0:	1f 5f       	subi	r17, 0xFF	; 255
 4d2:	14 30       	cpi	r17, 0x04	; 4
 4d4:	50 f3       	brcs	.-44     	; 0x4aa <SH_Data+0x26>
	{
		DIO_void_Set_pin_val(LCD_DPORT,LCD_PINS[itr],GET_BIT(data,itr));
	}
}
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0f 90       	pop	r0
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	08 95       	ret

000004e8 <LCD_Send_Enable_Pulse>:
#define F_CPU 16000000ul
#include <util/delay.h>

static void LCD_Send_Enable_Pulse(void) // static to be seen by this file only
{
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,HIGH);
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f2:	8f e3       	ldi	r24, 0x3F	; 63
 4f4:	9f e1       	ldi	r25, 0x1F	; 31
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <LCD_Send_Enable_Pulse+0xe>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_Send_Enable_Pulse+0x14>
 4fc:	00 00       	nop
	_delay_ms(2);
	DIO_void_Set_pin_val(LCD_E_PORT,LCD_E_PIN,LOW);
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
 508:	08 95       	ret

0000050a <LCD_send_command>:
		//Display Clear
		LCD_send_command(0x01);		
		#endif
}
void LCD_send_command(u8 command)
{
 50a:	cf 93       	push	r28
 50c:	c8 2f       	mov	r28, r24
	/* adjust controll signals to send command */
		/*set RS --> 0 to send command*/
	DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_PIN,LOW);
 50e:	40 e0       	ldi	r20, 0x00	; 0
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	/*set RW --> 0 to wright */
	DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_PIN,LOW);	
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	62 e0       	ldi	r22, 0x02	; 2
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	#if LCD_MODE == EIGHT_BIT_MODE
	//send enable pulse
	set_port_val(LCD_DATA_PORT,command);
	LCD_Send_Enable_Pulse();
	#elif LCD_MODE == FOUR_BIT_MODE
	SH_Data(command>>4);//SEND MOST SIGNIFICANT BIT
 522:	8c 2f       	mov	r24, r28
 524:	82 95       	swap	r24
 526:	8f 70       	andi	r24, 0x0F	; 15
 528:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT 
 52c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
	SH_Data(command);
 530:	8c 2f       	mov	r24, r28
 532:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
 536:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
	#endif
	
}
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_init>:
 53e:	2f ef       	ldi	r18, 0xFF	; 255
 540:	83 ef       	ldi	r24, 0xF3	; 243
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	21 50       	subi	r18, 0x01	; 1
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	90 40       	sbci	r25, 0x00	; 0
 54a:	e1 f7       	brne	.-8      	; 0x544 <LCD_init+0x6>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_init+0x10>
 54e:	00 00       	nop
		/*clear LCD*/
		LCD_send_command(0x01);
	#elif LCD_MODE == FOUR_BIT_MODE
		//send function set
		
		SH_Data(0b0010);
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
		LCD_Send_Enable_Pulse();
 556:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
		SH_Data(0b0010);
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
		LCD_Send_Enable_Pulse();
 560:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
		SH_Data(0b1100);
 564:	8c e0       	ldi	r24, 0x0C	; 12
 566:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
		LCD_Send_Enable_Pulse();
 56a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
		//Display ON/OFF Controll
		LCD_send_command(0b00001100);
 56e:	8c e0       	ldi	r24, 0x0C	; 12
 570:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_send_command>
		//Display Clear
		LCD_send_command(0x01);		
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_send_command>
 57a:	08 95       	ret

0000057c <LCD_send_data>:
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
	#endif
	
}
void LCD_send_data(u8 data)
{
 57c:	cf 93       	push	r28
 57e:	c8 2f       	mov	r28, r24
	/*set RS --> 1 to send command*/
	DIO_void_Set_pin_val(LCD_RS_PORT,LCD_RS_PIN,HIGH);
 580:	41 e0       	ldi	r20, 0x01	; 1
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	/*set RW --> 0 to write */
	DIO_void_Set_pin_val(LCD_RW_PORT,LCD_RW_PIN,LOW);
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	62 e0       	ldi	r22, 0x02	; 2
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_void_Set_pin_val>
	#if LCD_MODE == EIGHT_BIT_MODE
	//send enable pulse
	set_port_val(LCD_DATA_PORT,data);
	LCD_Send_Enable_Pulse();
	#elif LCD_MODE == FOUR_BIT_MODE
	SH_Data(data>>4);//SEND MOST SIGNIFICANT BIT
 594:	8c 2f       	mov	r24, r28
 596:	82 95       	swap	r24
 598:	8f 70       	andi	r24, 0x0F	; 15
 59a:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
 59e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
	SH_Data(data);
 5a2:	8c 2f       	mov	r24, r28
 5a4:	0e 94 42 02 	call	0x484	; 0x484 <SH_Data>
	LCD_Send_Enable_Pulse();//SEND LEAST SIGNIFICANT BIT
 5a8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Send_Enable_Pulse>
	#endif
}
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <LCD_send_string>:

void LCD_send_string(u8 string[])
{
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	8c 01       	movw	r16, r24
	u8 itr = 0;
 5b8:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[itr] != '\0')
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <LCD_send_string+0x12>
	{
		LCD_send_data(string[itr]);
 5bc:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_send_data>
		itr++;
 5c0:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_send_string(u8 string[])
{
	u8 itr = 0;
	while(string[itr] != '\0')
 5c2:	f8 01       	movw	r30, r16
 5c4:	ec 0f       	add	r30, r28
 5c6:	f1 1d       	adc	r31, r1
 5c8:	80 81       	ld	r24, Z
 5ca:	81 11       	cpse	r24, r1
 5cc:	f7 cf       	rjmp	.-18     	; 0x5bc <LCD_send_string+0xc>
	{
		LCD_send_data(string[itr]);
		itr++;
	}
}
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	08 95       	ret

000005d6 <main>:
int main(void)
{
	
	u8 key_val=0 ;
	  /* INIT Lcd pins  */
	  set_port_dir(LCD_DPORT,0x0f) ;
 5d6:	6f e0       	ldi	r22, 0x0F	; 15
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 55 01 	call	0x2aa	; 0x2aa <set_port_dir>
	  DIO_void_Set_pin_dir(LCD_RS_PORT,LCD_RS_PIN,OUTPUT) ;
 5de:	41 e0       	ldi	r20, 0x01	; 1
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
	  DIO_void_Set_pin_dir(LCD_RW_PORT,LCD_RW_PIN,OUTPUT) ;
 5e8:	41 e0       	ldi	r20, 0x01	; 1
 5ea:	62 e0       	ldi	r22, 0x02	; 2
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
	  DIO_void_Set_pin_dir(LCD_E_PORT,LCD_E_PIN,OUTPUT) ;
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	63 e0       	ldi	r22, 0x03	; 3
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_void_Set_pin_dir>
	  LCD_init() ;
 5fc:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_init>
	  KEYPAD_init() ;
 600:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <KEYPAD_init>
	  LCD_send_string("NONE");
 604:	80 e7       	ldi	r24, 0x70	; 112
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <LCD_send_string>
    while (1) 
    {
		
		
		do{
			key_val=KEYPAD_get_key() ;
 60c:	0e 94 ce 01 	call	0x39c	; 0x39c <KEYPAD_get_key>
 610:	c8 2f       	mov	r28, r24
		}while(key_val==0) ;
 612:	88 23       	and	r24, r24
 614:	d9 f3       	breq	.-10     	; 0x60c <main+0x36>
			LCD_send_command(0x01);
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_send_command>
			LCD_send_command(0x80);
 61c:	80 e8       	ldi	r24, 0x80	; 128
 61e:	0e 94 85 02 	call	0x50a	; 0x50a <LCD_send_command>
			LCD_send_data(key_val) ;
 622:	8c 2f       	mov	r24, r28
 624:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_send_data>
		
		
    }
 628:	f1 cf       	rjmp	.-30     	; 0x60c <main+0x36>

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
