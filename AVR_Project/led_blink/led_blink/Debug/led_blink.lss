
led_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000663  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000823  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000292  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030e  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "math.h"


int main(void)
{
    SET_BIT(DDRC,2);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	84 60       	ori	r24, 0x04	; 4
  70:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,7);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRD,3);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	88 60       	ori	r24, 0x08	; 8
  7c:	81 bb       	out	0x11, r24	; 17
	
    while (1) 
    {
	CLR_BIT(PORTC,7);
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	8f 77       	andi	r24, 0x7F	; 127
  82:	85 bb       	out	0x15, r24	; 21
    SET_BIT(PORTC,2);
  84:	85 b3       	in	r24, 0x15	; 21
  86:	84 60       	ori	r24, 0x04	; 4
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	83 ec       	ldi	r24, 0xC3	; 195
  8e:	99 e0       	ldi	r25, 0x09	; 9
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
	_delay_ms(200);
	CLR_BIT(PORTC,2);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	85 bb       	out	0x15, r24	; 21
	SET_BIT(PORTD,3);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	88 60       	ori	r24, 0x08	; 8
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	83 ec       	ldi	r24, 0xC3	; 195
  ac:	99 e0       	ldi	r25, 0x09	; 9
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
	_delay_ms(200);
	CLR_BIT(PORTD,3);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTC,7);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ec       	ldi	r24, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x60>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x6a>
  d6:	00 00       	nop
  d8:	d2 cf       	rjmp	.-92     	; 0x7e <main+0x12>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
