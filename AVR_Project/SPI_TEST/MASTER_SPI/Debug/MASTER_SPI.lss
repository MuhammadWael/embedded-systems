
MASTER_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3e  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e6  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038c  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000235e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_void_Set_pin_dir>:
#include "DIO_Interface.h"

void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin,u8 copy_u8_dir)
{
	 //set the pin's direction by taking the port and pin and direction in or out
	if (copy_u8_pin <= 7 &&copy_u8_pin >=0)
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_void_Set_pin_dir+0x6>
  70:	6d c0       	rjmp	.+218    	; 0x14c <DIO_void_Set_pin_dir+0xe0>
	{
		if(copy_u8_dir == OUTPUT)
  72:	41 30       	cpi	r20, 0x01	; 1
  74:	a1 f5       	brne	.+104    	; 0xde <DIO_void_Set_pin_dir+0x72>
		{
			switch(copy_u8_port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_void_Set_pin_dir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_void_Set_pin_dir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_void_Set_pin_dir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_void_Set_pin_dir+0x5c>
  84:	08 95       	ret
			{
				case PORTA:SET_BIT(DDRA_REG,copy_u8_pin); break;
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_void_Set_pin_dir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_void_Set_pin_dir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
				case PORTB:SET_BIT(DDRB_REG,copy_u8_pin);break;
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_void_Set_pin_dir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_void_Set_pin_dir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
				case PORTC:SET_BIT(DDRC_REG,copy_u8_pin);break;			
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_void_Set_pin_dir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_void_Set_pin_dir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
				case PORTD:SET_BIT(DDRD_REG,copy_u8_pin);break;
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_void_Set_pin_dir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_void_Set_pin_dir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
			}
		}
	
		else
		{
			switch(copy_u8_port)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_void_Set_pin_dir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_void_Set_pin_dir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_void_Set_pin_dir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_void_Set_pin_dir+0xca>
  ec:	08 95       	ret
			{
				case PORTA:CLR_BIT(DDRA_REG,copy_u8_pin); break;
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_void_Set_pin_dir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_void_Set_pin_dir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
				case PORTB:CLR_BIT(DDRB_REG,copy_u8_pin);break;
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_void_Set_pin_dir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_void_Set_pin_dir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
				case PORTC:CLR_BIT(DDRC_REG,copy_u8_pin);break;
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_void_Set_pin_dir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_void_Set_pin_dir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
				case PORTD:CLR_BIT(DDRD_REG,copy_u8_pin);break;
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_void_Set_pin_dir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_void_Set_pin_dir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <main>:
#define F_CPU 16000000ul
#include <util/delay.h>

int main(void)
{
	SPI_MasterInit();
 14e:	0e 94 b6 00 	call	0x16c	; 0x16c <SPI_MasterInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	83 ec       	ldi	r24, 0xC3	; 195
 156:	99 e0       	ldi	r25, 0x09	; 9
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0xa>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x14>
 162:	00 00       	nop
	_delay_ms(200);
	while(1)
	{
		SPI_Master_Transmit('F');	
 164:	86 e4       	ldi	r24, 0x46	; 70
 166:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_Master_Transmit>
 16a:	fc cf       	rjmp	.-8      	; 0x164 <main+0x16>

0000016c <SPI_MasterInit>:
	//SCK input
	//DIO_void_Set_pin_dir(PORTB,PIN7,INPUT);
	//SS  input
	DIO_void_Set_pin_dir(PORTB,PIN4,INPUT);
	//Enable SPI by SPE
	SET_BIT(SPCR_REG,6);
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	66 e0       	ldi	r22, 0x06	; 6
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	65 e0       	ldi	r22, 0x05	; 5
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	67 e0       	ldi	r22, 0x07	; 7
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	64 e0       	ldi	r22, 0x04	; 4
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
 194:	8d b1       	in	r24, 0x0d	; 13
 196:	80 61       	ori	r24, 0x10	; 16
 198:	8d b9       	out	0x0d, r24	; 13
 19a:	8d b1       	in	r24, 0x0d	; 13
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	8d b9       	out	0x0d, r24	; 13
 1a0:	08 95       	ret

000001a2 <SPI_Master_Transmit>:
	CLR_BIT(SPCR_REG,0);	
	CLR_BIT(SPSR_REG,0);*/
}
void SPI_Master_Transmit(u8 data)
{
	SPDR_REG = data;
 1a2:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR_REG,7) == 0);
 1a4:	77 9b       	sbis	0x0e, 7	; 14
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <SPI_Master_Transmit+0x2>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <SPI_Master_Transmit+0xc>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <SPI_Master_Transmit+0x16>
 1b8:	00 00       	nop
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
