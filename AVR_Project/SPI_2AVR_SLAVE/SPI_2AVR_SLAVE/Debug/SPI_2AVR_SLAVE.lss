
SPI_2AVR_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000294  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a95  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000724  00000000  00000000  00000e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000553  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000430  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003bb  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000023d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 18 01 	call	0x230	; 0x230 <main>
  64:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_void_Set_pin_dir>:
#include "DIO_Interface.h"

void DIO_void_Set_pin_dir(u8 copy_u8_port, u8 copy_u8_pin,u8 copy_u8_dir)
{
	 //set the pin's direction by taking the port and pin and direction in or out
	if (copy_u8_pin <= 7 &&copy_u8_pin >=0)
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_void_Set_pin_dir+0x6>
  70:	6d c0       	rjmp	.+218    	; 0x14c <DIO_void_Set_pin_dir+0xe0>
	{
		if(copy_u8_dir == OUTPUT)
  72:	41 30       	cpi	r20, 0x01	; 1
  74:	a1 f5       	brne	.+104    	; 0xde <DIO_void_Set_pin_dir+0x72>
		{
			switch(copy_u8_port)
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_void_Set_pin_dir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_void_Set_pin_dir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_void_Set_pin_dir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_void_Set_pin_dir+0x5c>
  84:	08 95       	ret
			{
				case PORTA:SET_BIT(DDRA_REG,copy_u8_pin); break;
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_void_Set_pin_dir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_void_Set_pin_dir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
				case PORTB:SET_BIT(DDRB_REG,copy_u8_pin);break;
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_void_Set_pin_dir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_void_Set_pin_dir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
				case PORTC:SET_BIT(DDRC_REG,copy_u8_pin);break;			
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_void_Set_pin_dir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_void_Set_pin_dir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
				case PORTD:SET_BIT(DDRD_REG,copy_u8_pin);break;
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_void_Set_pin_dir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_void_Set_pin_dir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
			}
		}
	
		else
		{
			switch(copy_u8_port)
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_void_Set_pin_dir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_void_Set_pin_dir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_void_Set_pin_dir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_void_Set_pin_dir+0xca>
  ec:	08 95       	ret
			{
				case PORTA:CLR_BIT(DDRA_REG,copy_u8_pin); break;
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_void_Set_pin_dir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_void_Set_pin_dir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
				case PORTB:CLR_BIT(DDRB_REG,copy_u8_pin);break;
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_void_Set_pin_dir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_void_Set_pin_dir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
				case PORTC:CLR_BIT(DDRC_REG,copy_u8_pin);break;
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_void_Set_pin_dir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_void_Set_pin_dir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
				case PORTD:CLR_BIT(DDRD_REG,copy_u8_pin);break;
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_void_Set_pin_dir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_void_Set_pin_dir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_void_Set_pin_val>:
		}
	}
}
void DIO_void_Set_pin_val(u8 copy_u8_port, u8 copy_u8_pin,u8 copy_u8_val)
{// set the value of pin
	if (copy_u8_pin <= 7 &&copy_u8_pin >=0)
 14e:	68 30       	cpi	r22, 0x08	; 8
 150:	08 f0       	brcs	.+2      	; 0x154 <DIO_void_Set_pin_val+0x6>
 152:	6d c0       	rjmp	.+218    	; 0x22e <DIO_void_Set_pin_val+0xe0>
	{
		if (copy_u8_val == HIGH)
 154:	41 30       	cpi	r20, 0x01	; 1
 156:	a1 f5       	brne	.+104    	; 0x1c0 <DIO_void_Set_pin_val+0x72>
		{
			switch(copy_u8_port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	89 f0       	breq	.+34     	; 0x17e <DIO_void_Set_pin_val+0x30>
 15c:	28 f0       	brcs	.+10     	; 0x168 <DIO_void_Set_pin_val+0x1a>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	c9 f0       	breq	.+50     	; 0x194 <DIO_void_Set_pin_val+0x46>
 162:	83 30       	cpi	r24, 0x03	; 3
 164:	11 f1       	breq	.+68     	; 0x1aa <DIO_void_Set_pin_val+0x5c>
 166:	08 95       	ret
			{
			case PORTA:SET_BIT(PORTA_REG,copy_u8_pin);break;
 168:	2b b3       	in	r18, 0x1b	; 27
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_void_Set_pin_val+0x26>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_void_Set_pin_val+0x22>
 178:	82 2b       	or	r24, r18
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	08 95       	ret
			case PORTB:SET_BIT(PORTB_REG,copy_u8_pin);break;
 17e:	28 b3       	in	r18, 0x18	; 24
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_void_Set_pin_val+0x3c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_void_Set_pin_val+0x38>
 18e:	82 2b       	or	r24, r18
 190:	88 bb       	out	0x18, r24	; 24
 192:	08 95       	ret
			case PORTC:SET_BIT(PORTC_REG,copy_u8_pin);break;
 194:	25 b3       	in	r18, 0x15	; 21
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_void_Set_pin_val+0x52>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_void_Set_pin_val+0x4e>
 1a4:	82 2b       	or	r24, r18
 1a6:	85 bb       	out	0x15, r24	; 21
 1a8:	08 95       	ret
			case PORTD:SET_BIT(PORTD_REG,copy_u8_pin);break;
 1aa:	22 b3       	in	r18, 0x12	; 18
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_void_Set_pin_val+0x68>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_void_Set_pin_val+0x64>
 1ba:	82 2b       	or	r24, r18
 1bc:	82 bb       	out	0x12, r24	; 18
 1be:	08 95       	ret
			}
		}
		else 
		{
			switch(copy_u8_port)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <DIO_void_Set_pin_val+0x9a>
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_void_Set_pin_val+0x82>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	d9 f0       	breq	.+54     	; 0x200 <DIO_void_Set_pin_val+0xb2>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	29 f1       	breq	.+74     	; 0x218 <DIO_void_Set_pin_val+0xca>
 1ce:	08 95       	ret
			{
				case PORTA:CLR_BIT(PORTA_REG,copy_u8_pin);break;
 1d0:	2b b3       	in	r18, 0x1b	; 27
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_void_Set_pin_val+0x8e>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_void_Set_pin_val+0x8a>
 1e0:	80 95       	com	r24
 1e2:	82 23       	and	r24, r18
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	08 95       	ret
				case PORTB:CLR_BIT(PORTB_REG,copy_u8_pin);break;
 1e8:	28 b3       	in	r18, 0x18	; 24
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_void_Set_pin_val+0xa6>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_void_Set_pin_val+0xa2>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	88 bb       	out	0x18, r24	; 24
 1fe:	08 95       	ret
				case PORTC:CLR_BIT(PORTC_REG,copy_u8_pin);break;
 200:	25 b3       	in	r18, 0x15	; 21
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_void_Set_pin_val+0xbe>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_void_Set_pin_val+0xba>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	85 bb       	out	0x15, r24	; 21
 216:	08 95       	ret
				case PORTD:CLR_BIT(PORTD_REG,copy_u8_pin);break;
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_void_Set_pin_val+0xd6>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_void_Set_pin_val+0xd2>
 228:	80 95       	com	r24
 22a:	82 23       	and	r24, r18
 22c:	82 bb       	out	0x12, r24	; 18
 22e:	08 95       	ret

00000230 <main>:
#include "SPI_Interface.h"


int main(void)
{
    DIO_void_Set_pin_dir(PORTC,PIN2,OUTPUT);
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	62 e0       	ldi	r22, 0x02	; 2
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
    DIO_void_Set_pin_dir(PORTC,PIN7,OUTPUT);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	67 e0       	ldi	r22, 0x07	; 7
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(PORTD,PIN3,OUTPUT);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	SPI_SlaveInit();
 24e:	0e 94 3b 01 	call	0x276	; 0x276 <SPI_SlaveInit>
	u8 data = 0;
    while (1) 
    {		
			data = SPI_Slave_Recive();
 252:	0e 94 44 01 	call	0x288	; 0x288 <SPI_Slave_Recive>
			if(data = 'A')
			{
		    DIO_void_Set_pin_val(PORTC,PIN2,HIGH);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_void_Set_pin_val>
		    }
			if(data = 'B')
			{
				    DIO_void_Set_pin_val(PORTC,PIN7,HIGH);
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_void_Set_pin_val>
		    }
			if(data = 'C')
			{
			    DIO_void_Set_pin_val(PORTD,PIN3,HIGH);
 26a:	41 e0       	ldi	r20, 0x01	; 1
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_void_Set_pin_val>
 274:	ee cf       	rjmp	.-36     	; 0x252 <main+0x22>

00000276 <SPI_SlaveInit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
 280:	8d b1       	in	r24, 0x0d	; 13
 282:	80 64       	ori	r24, 0x40	; 64
 284:	8d b9       	out	0x0d, r24	; 13
 286:	08 95       	ret

00000288 <SPI_Slave_Recive>:
	while(GET_BIT(SPSR_REG,7) == 0);
_delay_ms(500);
}
u8 SPI_Slave_Recive(void)
{
	while(GET_BIT(SPSR_REG,7) == 0);
 288:	77 9b       	sbis	0x0e, 7	; 14
 28a:	fe cf       	rjmp	.-4      	; 0x288 <SPI_Slave_Recive>
	return SPDR_REG ;
 28c:	8f b1       	in	r24, 0x0f	; 15
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
