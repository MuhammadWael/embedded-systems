
TWO_AVR_LED_SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d2  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000675  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bf  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000018c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039c  00000000  00000000  00001d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  64:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_void_Set_pin_dir>:
			switch(copy_u8_port)
			{
				case PORTA:CLR_BIT(PORTA_REG,copy_u8_pin);break;
				case PORTB:CLR_BIT(PORTB_REG,copy_u8_pin);break;
				case PORTC:CLR_BIT(PORTC_REG,copy_u8_pin);break;
				case PORTD:CLR_BIT(PORTD_REG,copy_u8_pin);break;
  6c:	68 30       	cpi	r22, 0x08	; 8
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_void_Set_pin_dir+0x6>
  70:	6d c0       	rjmp	.+218    	; 0x14c <DIO_void_Set_pin_dir+0xe0>
  72:	41 30       	cpi	r20, 0x01	; 1
  74:	a1 f5       	brne	.+104    	; 0xde <DIO_void_Set_pin_dir+0x72>
  76:	81 30       	cpi	r24, 0x01	; 1
  78:	89 f0       	breq	.+34     	; 0x9c <DIO_void_Set_pin_dir+0x30>
  7a:	28 f0       	brcs	.+10     	; 0x86 <DIO_void_Set_pin_dir+0x1a>
  7c:	82 30       	cpi	r24, 0x02	; 2
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_void_Set_pin_dir+0x46>
  80:	83 30       	cpi	r24, 0x03	; 3
  82:	11 f1       	breq	.+68     	; 0xc8 <DIO_void_Set_pin_dir+0x5c>
  84:	08 95       	ret
  86:	2a b3       	in	r18, 0x1a	; 26
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_void_Set_pin_dir+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_void_Set_pin_dir+0x22>
  96:	82 2b       	or	r24, r18
  98:	8a bb       	out	0x1a, r24	; 26
  9a:	08 95       	ret
  9c:	27 b3       	in	r18, 0x17	; 23
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_void_Set_pin_dir+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_void_Set_pin_dir+0x38>
  ac:	82 2b       	or	r24, r18
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	08 95       	ret
  b2:	24 b3       	in	r18, 0x14	; 20
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_void_Set_pin_dir+0x52>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_void_Set_pin_dir+0x4e>
  c2:	82 2b       	or	r24, r18
  c4:	84 bb       	out	0x14, r24	; 20
  c6:	08 95       	ret
  c8:	21 b3       	in	r18, 0x11	; 17
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_void_Set_pin_dir+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_void_Set_pin_dir+0x64>
  d8:	82 2b       	or	r24, r18
  da:	81 bb       	out	0x11, r24	; 17
  dc:	08 95       	ret
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	91 f0       	breq	.+36     	; 0x106 <DIO_void_Set_pin_dir+0x9a>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_void_Set_pin_dir+0x82>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	d9 f0       	breq	.+54     	; 0x11e <DIO_void_Set_pin_dir+0xb2>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	29 f1       	breq	.+74     	; 0x136 <DIO_void_Set_pin_dir+0xca>
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_void_Set_pin_dir+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_void_Set_pin_dir+0x8a>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_void_Set_pin_dir+0xa6>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_void_Set_pin_dir+0xa2>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_void_Set_pin_dir+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_void_Set_pin_dir+0xba>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	21 b3       	in	r18, 0x11	; 17
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_void_Set_pin_dir+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_void_Set_pin_dir+0xd2>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	81 bb       	out	0x11, r24	; 17
 14c:	08 95       	ret

0000014e <DIO_u8_Get_pin_val>:
	}
}
u8 DIO_u8_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin)
{
	u8 local_u8_val = 0;
	if (copy_u8_pin <= 7 && copy_u8_pin >=0)
 14e:	68 30       	cpi	r22, 0x08	; 8
 150:	60 f5       	brcc	.+88     	; 0x1aa <DIO_u8_Get_pin_val+0x5c>
	{
		switch(copy_u8_port)
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	79 f0       	breq	.+30     	; 0x174 <DIO_u8_Get_pin_val+0x26>
 156:	28 f0       	brcs	.+10     	; 0x162 <DIO_u8_Get_pin_val+0x14>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	a9 f0       	breq	.+42     	; 0x186 <DIO_u8_Get_pin_val+0x38>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	e1 f0       	breq	.+56     	; 0x198 <DIO_u8_Get_pin_val+0x4a>
 160:	26 c0       	rjmp	.+76     	; 0x1ae <DIO_u8_Get_pin_val+0x60>
		{
			case PORTA: local_u8_val = GET_BIT(PINA_REG,copy_u8_pin);break;
 162:	89 b3       	in	r24, 0x19	; 25
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8_Get_pin_val+0x1e>
 168:	95 95       	asr	r25
 16a:	87 95       	ror	r24
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8_Get_pin_val+0x1a>
 170:	81 70       	andi	r24, 0x01	; 1
 172:	08 95       	ret
			case PORTB: local_u8_val = GET_BIT(PINB_REG,copy_u8_pin);break;
 174:	86 b3       	in	r24, 0x16	; 22
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_u8_Get_pin_val+0x30>
 17a:	95 95       	asr	r25
 17c:	87 95       	ror	r24
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_u8_Get_pin_val+0x2c>
 182:	81 70       	andi	r24, 0x01	; 1
 184:	08 95       	ret
			case PORTC: local_u8_val = GET_BIT(PINC_REG,copy_u8_pin);break;
 186:	83 b3       	in	r24, 0x13	; 19
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_u8_Get_pin_val+0x42>
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_u8_Get_pin_val+0x3e>
 194:	81 70       	andi	r24, 0x01	; 1
 196:	08 95       	ret
			case PORTD: local_u8_val = GET_BIT(PIND_REG,copy_u8_pin);break;
 198:	80 b3       	in	r24, 0x10	; 16
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_u8_Get_pin_val+0x54>
 19e:	95 95       	asr	r25
 1a0:	87 95       	ror	r24
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_u8_Get_pin_val+0x50>
 1a6:	81 70       	andi	r24, 0x01	; 1
 1a8:	08 95       	ret
		}
	}
}
u8 DIO_u8_Get_pin_val(u8 copy_u8_port, u8 copy_u8_pin)
{
	u8 local_u8_val = 0;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	08 95       	ret
 1ae:	80 e0       	ldi	r24, 0x00	; 0
			case PORTD: local_u8_val = GET_BIT(PIND_REG,copy_u8_pin);break;
		
		}
	}
	return local_u8_val;
}
 1b0:	08 95       	ret

000001b2 <main>:
#include "DIO_Interface.h"
#include "USART_Interface.h"

int main(void)
{
    DIO_void_Set_pin_dir(PORTB,PIN0,INPUT);
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(PORTD,PIN6,INPUT);
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	66 e0       	ldi	r22, 0x06	; 6
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	DIO_void_Set_pin_dir(PORTD,PIN3,INPUT);
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	USART_Init();
 1d0:	0e 94 1d 01 	call	0x23a	; 0x23a <USART_Init>
	DIO_void_Set_pin_dir(PORTD,PIN1,OUTPUT);
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_void_Set_pin_dir>
	
    while (1) 
    {
		if (DIO_u8_Get_pin_val(PORTB,PIN0) == 1)
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8_Get_pin_val>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	49 f4       	brne	.+18     	; 0x1fc <main+0x4a>
		{
			
			USART_TX('0');
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 2c 01 	call	0x258	; 0x258 <USART_TX>
			while(DIO_u8_Get_pin_val(PORTB,PIN0) == 1);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8_Get_pin_val>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	d1 f3       	breq	.-12     	; 0x1f0 <main+0x3e>
		}
		if (DIO_u8_Get_pin_val(PORTD,PIN6) == 1)
 1fc:	66 e0       	ldi	r22, 0x06	; 6
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8_Get_pin_val>
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	49 f4       	brne	.+18     	; 0x21a <main+0x68>
		{
			USART_TX('1');
 208:	81 e3       	ldi	r24, 0x31	; 49
 20a:	0e 94 2c 01 	call	0x258	; 0x258 <USART_TX>
			while(DIO_u8_Get_pin_val(PORTD,PIN6) == 1);
 20e:	66 e0       	ldi	r22, 0x06	; 6
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8_Get_pin_val>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	d1 f3       	breq	.-12     	; 0x20e <main+0x5c>
		}
		if (DIO_u8_Get_pin_val(PORTD,PIN2) == 1)
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8_Get_pin_val>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	e1 f6       	brne	.-72     	; 0x1de <main+0x2c>
		{
			USART_TX('2');
 226:	82 e3       	ldi	r24, 0x32	; 50
 228:	0e 94 2c 01 	call	0x258	; 0x258 <USART_TX>
			while(DIO_u8_Get_pin_val(PORTD,PIN2) == 1);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8_Get_pin_val>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	d1 f3       	breq	.-12     	; 0x22c <main+0x7a>
 238:	d2 cf       	rjmp	.-92     	; 0x1de <main+0x2c>

0000023a <USART_Init>:
}
u8 USART_RX(void)
{
	while (GET_BIT(UCSRA_REG,RXC) == 0);
	return UDR_REG;
}
 23a:	87 e6       	ldi	r24, 0x67	; 103
 23c:	89 b9       	out	0x09, r24	; 9
 23e:	8a b1       	in	r24, 0x0a	; 10
 240:	88 60       	ori	r24, 0x08	; 8
 242:	8a b9       	out	0x0a, r24	; 10
 244:	8a b1       	in	r24, 0x0a	; 10
 246:	80 61       	ori	r24, 0x10	; 16
 248:	8a b9       	out	0x0a, r24	; 10
 24a:	8a b1       	in	r24, 0x0a	; 10
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8a b9       	out	0x0a, r24	; 10
 250:	8a b1       	in	r24, 0x0a	; 10
 252:	80 64       	ori	r24, 0x40	; 64
 254:	8a b9       	out	0x0a, r24	; 10
 256:	08 95       	ret

00000258 <USART_TX>:
void USART_TX(u8 data)
{
	UDR_REG = data;
 258:	8c b9       	out	0x0c, r24	; 12
	while (GET_BIT(UCSRA_REG,TXC) == 0);	
 25a:	5e 9b       	sbis	0x0b, 6	; 11
 25c:	fe cf       	rjmp	.-4      	; 0x25a <USART_TX+0x2>
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
