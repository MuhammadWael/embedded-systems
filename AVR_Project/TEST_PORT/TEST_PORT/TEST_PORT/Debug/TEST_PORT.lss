
TEST_PORT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c1  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000381  00000000  00000000  00000fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000325  00000000  00000000  00001791  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 00 	call	0x108	; 0x108 <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <set_port_dir>:
	}
}

void set_port_dir(u8 copy_u8_port,u8 copy_u8_dir)
{
	if (copy_u8_dir == OUTPUT)
  6c:	61 30       	cpi	r22, 0x01	; 1
  6e:	99 f4       	brne	.+38     	; 0x96 <set_port_dir+0x2a>
	{
		switch(copy_u8_port)
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	49 f0       	breq	.+18     	; 0x86 <set_port_dir+0x1a>
  74:	28 f0       	brcs	.+10     	; 0x80 <set_port_dir+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	49 f0       	breq	.+18     	; 0x8c <set_port_dir+0x20>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	51 f0       	breq	.+20     	; 0x92 <set_port_dir+0x26>
  7e:	0b c0       	rjmp	.+22     	; 0x96 <set_port_dir+0x2a>
		{
			case PORTA: DDRA_REG = 0Xff;break;
  80:	9f ef       	ldi	r25, 0xFF	; 255
  82:	9a bb       	out	0x1a, r25	; 26
  84:	08 c0       	rjmp	.+16     	; 0x96 <set_port_dir+0x2a>
			case PORTB: DDRB_REG = 0Xff;break;
  86:	9f ef       	ldi	r25, 0xFF	; 255
  88:	97 bb       	out	0x17, r25	; 23
  8a:	05 c0       	rjmp	.+10     	; 0x96 <set_port_dir+0x2a>
			case PORTC: DDRC_REG = 0Xff;break;
  8c:	9f ef       	ldi	r25, 0xFF	; 255
  8e:	94 bb       	out	0x14, r25	; 20
  90:	02 c0       	rjmp	.+4      	; 0x96 <set_port_dir+0x2a>
			case PORTD: DDRD_REG = 0Xff;break;
  92:	9f ef       	ldi	r25, 0xFF	; 255
  94:	91 bb       	out	0x11, r25	; 17
		}
	}
	if (copy_u8_dir == INPUT)
  96:	61 11       	cpse	r22, r1
  98:	0f c0       	rjmp	.+30     	; 0xb8 <set_port_dir+0x4c>
	{
		switch(copy_u8_port)
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	41 f0       	breq	.+16     	; 0xae <set_port_dir+0x42>
  9e:	28 f0       	brcs	.+10     	; 0xaa <set_port_dir+0x3e>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	39 f0       	breq	.+14     	; 0xb2 <set_port_dir+0x46>
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	39 f0       	breq	.+14     	; 0xb6 <set_port_dir+0x4a>
  a8:	08 95       	ret
		{
			case PORTA: DDRA_REG = 0X00;break;
  aa:	1a ba       	out	0x1a, r1	; 26
  ac:	08 95       	ret
			case PORTB: DDRB_REG = 0X00;break;
  ae:	17 ba       	out	0x17, r1	; 23
  b0:	08 95       	ret
			case PORTC: DDRC_REG = 0X00;break;
  b2:	14 ba       	out	0x14, r1	; 20
  b4:	08 95       	ret
			case PORTD: DDRD_REG = 0X00;break;
  b6:	11 ba       	out	0x11, r1	; 17
  b8:	08 95       	ret

000000ba <set_port_val>:
		}
	}
}
void set_port_val(u8 copy_u8_port,u8 copy_u8_val)
{
	if (copy_u8_val == HIGH)
  ba:	61 30       	cpi	r22, 0x01	; 1
  bc:	99 f4       	brne	.+38     	; 0xe4 <set_port_val+0x2a>
	{
		switch(copy_u8_port)
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	49 f0       	breq	.+18     	; 0xd4 <set_port_val+0x1a>
  c2:	28 f0       	brcs	.+10     	; 0xce <set_port_val+0x14>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	49 f0       	breq	.+18     	; 0xda <set_port_val+0x20>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	51 f0       	breq	.+20     	; 0xe0 <set_port_val+0x26>
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <set_port_val+0x2a>
		{
			case PORTA: PORTA_REG = 0Xff;break;
  ce:	9f ef       	ldi	r25, 0xFF	; 255
  d0:	9b bb       	out	0x1b, r25	; 27
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <set_port_val+0x2a>
			case PORTB: PORTB_REG = 0Xff;break;
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	98 bb       	out	0x18, r25	; 24
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <set_port_val+0x2a>
			case PORTC: PORTC_REG = 0Xff;break;
  da:	9f ef       	ldi	r25, 0xFF	; 255
  dc:	95 bb       	out	0x15, r25	; 21
  de:	02 c0       	rjmp	.+4      	; 0xe4 <set_port_val+0x2a>
			case PORTD: PORTD_REG = 0Xff;break;
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	92 bb       	out	0x12, r25	; 18
		}
	}
	if (copy_u8_val == LOW)
  e4:	61 11       	cpse	r22, r1
  e6:	0f c0       	rjmp	.+30     	; 0x106 <set_port_val+0x4c>
	{
		switch(copy_u8_port)
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	41 f0       	breq	.+16     	; 0xfc <set_port_val+0x42>
  ec:	28 f0       	brcs	.+10     	; 0xf8 <set_port_val+0x3e>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	39 f0       	breq	.+14     	; 0x100 <set_port_val+0x46>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	39 f0       	breq	.+14     	; 0x104 <set_port_val+0x4a>
  f6:	08 95       	ret
		{
			case PORTA: PORTA_REG = 0X00;break;
  f8:	1b ba       	out	0x1b, r1	; 27
  fa:	08 95       	ret
			case PORTB: PORTB_REG = 0X00;break;
  fc:	18 ba       	out	0x18, r1	; 24
  fe:	08 95       	ret
			case PORTC: PORTC_REG = 0X00;break;
 100:	15 ba       	out	0x15, r1	; 21
 102:	08 95       	ret
			case PORTD: PORTD_REG = 0X00;break;
 104:	12 ba       	out	0x12, r1	; 18
 106:	08 95       	ret

00000108 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
    set_port_dir(PORTA,OUTPUT);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 36 00 	call	0x6c	; 0x6c <set_port_dir>
	set_port_val(PORTA,HIGH);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 5d 00 	call	0xba	; 0xba <set_port_val>
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x10>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
